---
import Layout from "@/layouts/Layout.astro";
import {
  getCollection,
  getEntryBySlug,
  type CollectionEntry,
} from "astro:content";
import { formatDate } from "@/lib/utils";
import GlassHeader from "@/components/GlassHeader";
import Footer from "@/components/Footer";

export async function getStaticPaths() {
  // Get all non-draft blog posts in production, or all posts in development
  const posts = await getCollection("blog", ({ data }) => {
    return import.meta.env.PROD ? !data.draft : true;
  });

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;
const { Content } = await post.render();

const { title, description, date, updatedDate, image, tags } = post.data;
---

<Layout
  title={`${title} | Blog | Siddhesh Nandurkar`}
  description={description}
>
  <GlassHeader client:only="react" />

  <main class="container max-w-4xl mx-auto px-4 pt-12 pb-4">
    <article class="prose prose-lg dark:prose-invert mx-auto">
      {
        image && (
          <div class="relative mb-6 w-full overflow-hidden rounded-lg">
            <img
              src={image}
              alt={title}
              class="h-auto w-full object-cover"
              style="aspect-ratio: 16/9;"
            />
          </div>
        )
      }

      <h1 class="mb-4 text-3xl font-bold sm:text-4xl">{title}</h1>

      <div
        class="mb-6 flex flex-wrap items-center gap-x-3 gap-y-2 text-sm text-foreground/70"
      >
        <time datetime={date.toISOString()}>
          Published: {formatDate(date)}
        </time>

        {
          updatedDate && (
            <time datetime={updatedDate.toISOString()}>
              Updated: {formatDate(updatedDate)}
            </time>
          )
        }

        <span class="text-foreground/50">|</span>
        <span>
          Author:
          <a href="/" class="text-purple-500 hover:text-purple-600">
            Siddhesh Nandurkar
          </a>
        </span>
      </div>

      <div class="flex flex-wrap gap-2">
        {
          tags.map((tag) => (
            <a
              href={`/blog/tag/${tag}`}
              class="inline-flex items-center rounded-full bg-purple-600 text-white px-2 py-1 text-xs font-medium  transition-colors "
            >
              {tag}
            </a>
          ))
        }
      </div>
    </article>

    <div class="mt-8 blog-content">
      <Content />
    </div>
  </main>

  <div class="mx-auto max-w-4xl mb-8">
    <a
      href="/blog"
      class="inline-flex items-center ml-3
       px-4 py-2 rounded-full
      text-md font-medium transition-colors
      text-white bg-purple-500 hover:bg-purple-800"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="lucide lucide-arrow-left-icon lucide-arrow-left"
        ><path d="m12 19-7-7 7-7"></path><path d="M19 12H5"></path></svg
      >{" "}&nbsp; Go back to all articles
    </a>
  </div>
</Layout>

<Footer client:only="react" />

<style is:global>
  .blog-content {
    line-height: 1.7;
  }

  .blog-content h1,
  .blog-content h2,
  .blog-content h3,
  .blog-content h4,
  .blog-content h5,
  .blog-content h6 {
    margin-top: 2rem;
    margin-bottom: 1rem;
    font-weight: 600;
    line-height: 1.3;
  }

  .blog-content h1 {
    font-size: 2.25rem;
  }

  .blog-content h2 {
    font-size: 1.8rem;
    border-bottom: 1px solid var(--border);
    padding-bottom: 0.5rem;
  }

  .blog-content h3 {
    font-size: 1.5rem;
  }

  .blog-content p {
    margin-bottom: 1.5rem;
  }

  .blog-content ul,
  .blog-content ol {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .blog-content ul {
    list-style-type: disc;
  }

  .blog-content ol {
    list-style-type: decimal;
  }

  .blog-content li {
    margin-bottom: 0.5rem;
  }

  .blog-content code {
    padding: 0.2rem 0.4rem;
    background-color: var(--muted);
    border-radius: 0.25rem;
    font-family: monospace;
    font-size: 0.9em;
  }

  .blog-content pre {
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: 0.5rem;
    background-color: var(--card);
    overflow-x: auto;
  }

  .blog-content pre code {
    background: none;
    padding: 0;
  }

  .blog-content a {
    color: var(--purple-500, #8b5cf6);
    text-decoration: underline;
    text-underline-offset: 2px;
  }

  .blog-content blockquote {
    border-left: 4px solid var(--purple-500, #8b5cf6);
    padding-left: 1rem;
    margin-left: 0;
    margin-right: 0;
    font-style: italic;
  }

  .blog-content img {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
  }

  /* Dark mode syntax highlighting can be added here */
</style>
